@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using RedisDemo.Data
@inject WeatherForecastService ForecastService

@using RedisDemo.Extensions
@inject Microsoft.Extensions.Caching.Distributed.IDistributedCache cache


<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<button class="btn btn-primary" @onclick="Loadforcat">Load Forecast</button>
@if(forecasts is null && string.IsNullOrEmpty(loadLocation))
{
    <p><em>Click the button to load the forecast</em></p>
}
else if (forecasts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="h3 @isCacheData" >@loadLocation</div>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string loadLocation = string.Empty;
    private string isCacheData = string.Empty;

    private async Task Loadforcat()
    {
        forecasts = null;
        loadLocation = string.Empty;

        string recordKey = "WeatherForast_" + DateTime.Now.ToString("yyyyMMdd_hhmm");

        forecasts = await cache.GetRecordAsync<WeatherForecast[]>(recordKey);
        if (forecasts == null)
        {
            forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
            loadLocation = $"Loaded from API at {DateTime.Now}";
            isCacheData = "";
            await cache.SetRecoredAsync(recordKey, forecasts);
        }
        else
        {
            loadLocation = $"Loaded from cache at {DateTime.Now}";
            isCacheData = "text-danger";
        }

    }
}
